- Git branching allows developers to diverge from the production version of code to fix a bug or add a feature.
- This done as developers create branches to work with a copy of the code without modifying the existing version.
- You create branches to isolate your code changes, which you test before merging to the main branch (more on this later).
- There is nothing special about the main branch. It is the first branch made when you initialize a Git repository using the git initcommand or clone git-repo.



$ git checkout <existing_branch>
$ git checkout -b <new_branch>



$ git branch -a
$ git show-branch



$ git switch <existing_branch>



- you cannot checkout to the branch even though you create it untill you do some task(create_new_file,edit_some_file, etc) staying in tthat particular branch.
- you cannot see to the branch in branch_list even though you create it untill you do some task(create_new_file,edit_some_file, etc) staying in tthat particular branch.
Q. what happen to the branch the we create when we dont do ant task on it and switch into some other branch?



Q. while creating any branches, does it matter "on top of what branch we created this particular branches"?
Q. What will happen to the task/manipulation/updation that we have done, staying in that particular task, if we delete that branch before commiting.
    - so indoder to delete that particular branch you need to switch some other branch first, then the manipulated task is also switched to that branch.



$ git branch -d seventh-branch



# You push branch to gitrepo:
    $ git push -u origin main
    $ git push origin main
    $ git push origin branch1
    $ git push origin branch2
    # when you push the branch it also crimp the changes made by previous branches before it pushed.



Q. How to see the branch tree in git?



- branch: create,delete,rename,switch,compare,merge,rebase,publish,track,
- HEAD branch: currently active/checkouted/switched branch.
- You can have many branches in your repo but only one active branch at a time.
- local branches(in local system/machine's git) and rtemote branches(in github,gitlab,bitbucket).
$ git branch new_branch_name: create branch based on current commit revision.
$ git branch new_branch_name revision: create branch after particular commit.
- you can only create new branch in local repo, and new branch is created in remote repo only when you publish existing local branch.
$ git push: will publish your local commits.

1. create branch on particular revision.
2. switching/checkingout branches.
3. publish your local branch with commits.

- the head branch defines the context that your work is in at the moment.
- and the head branch is where new commit will be created.



$ git branch -a
    * branch1
    branch2
    main
    remotes/origin/branch1
    remotes/origin/branch2
    remotes/origin/main

    > above info says that branch1 is your head branch
    > you have total 3(main,branch1,branch2) branches in your local machine.
    > and all of them are published into remote repo.



$ git branch -a
    branch1
    branch2
    branch3
    * branch4
    main
    remotes/origin/branch1
    remotes/origin/branch2
    remotes/origin/main

    > above info says that branch4 is your head branch
    > you have total 5(main,branch1,branch2,branch3,branch4) branches in your local machine.
    > and all of them are published into remote repo but not branch3 & branch4.



- rename the local head branch: $ git branch -m <new_name>
- rename the local other_non-head branch: $ git branch -m <new_name> <old_name>



- publish loacl-branch of loacl-repo into remote-repo: 
    $ git push -u origin main
    $ git push origin branch1
    $ git push origin branch1/branch1.1



- tracking branches:
    - 



- pull & push branch:
    $ git branch -v
    $ 



- delete other branch, but not possible to delete head bracnh.
    $ git branch -d <branch_name with no commit>
    $ git branch -D <branch_name with commit>:
        - this will also delete all the manipulation done during that respective commit of that respective branch,
        - but if have create new branch with revision of commit of the branch you want to delete, it will delete that branch but not commit as those commit has already been attached with the new_branch created with the crevision of commit of deleted branch.



- see list of commit in that particular branch:
    $ git flog
    $ git log
    $ 



# Reference:
    - https://www.varonis.com/blog/git-branching#:~:text=What%20is%20Git%20Branching%3F&text=Git%20branching%20allows%20developers%20to,without%20modifying%20the%20existing%20version.
    - https://www.youtube.com/watch?v=e2IbNHi4uCI
    - 